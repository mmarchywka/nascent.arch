#ifndef MJM_KV_VECTOR_H__
#define MJM_KV_VECTOR_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"
#include "mjm_loo_parsing.h"
#include "mjm_collections.h"

#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


// Fri Apr  1 18:50:50 EDT 2022
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_kv_vector   
// g++  -Wall -std=gnu++11 -DTEST_MJM_KV_VECTOR -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_kv_vector.h  -o mjm_kv_vector.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_kv_vector("mjm_kv_vector"
, "  ");

template <class Tk, class Tv,class Tr>
class mjm_kv_vector 
{
 typedef mjm_kv_vector Myt;
typedef Tk KeyType;
typedef Tv ValueType;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

typedef std::vector<Tk> KeyVec;
typedef std::vector<Tv> ValueVec;
typedef std::vector<KeyVec> KeyVecVec;
typedef std::vector<ValueVec> ValueVecVec;

typedef std::map<KeyVec,ValueVec> MapType;

typedef mjm_loo_parsing<Tr> Loo;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;

public:
mjm_kv_vector() {}
~mjm_kv_vector() {}
IdxTy add(const KeyVec & k, const StrTy  & v) 
{ m_map[k].push_back(v); return 0; } 
IdxTy add(const KeyVec & k, const ValueVec & v)
{ return Add(k,v); } 
IdxTy to_ragged(Ragged & r, const IdxTy flags)
{ return ToRagged(r,flags); } 
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
IdxTy Add(const KeyVec & k, const ValueVec & v)
{
auto ii=m_map.find(k);
if (ii==m_map.end()) { m_map[k]=v; return 0; } 
auto & v1=(*ii).second;
MM_SZ_LOOP(j,v1,sz) { v1[j]+=v[j]; }
return 0; 
}

template <class Tx> StrTy ToStrTy(const Tx & x)
{ return StrTy(x); } 
// this may be a better default than above.   
StrTy ToStrTy(const double & x)
{Ss ss; ss<<x;  return StrTy(ss.str()); } 
IdxTy ToRagged(Ragged & r, const IdxTy flags)
{
MM_LOOP(ii,m_map)
{
Line l;
MM_LOOP(jj,(*ii).first) l.push_back(ToStrTy(*jj)); 
MM_LOOP(jj,(*ii).second) l.push_back(ToStrTy(*jj)); 
r.add(l);

} // ii 
return 0; 
} // ToRagged

bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
StrTy Dump(const IdxTy flags=0) {Ss ss;  
MM_LOOP(ii,m_map)
{
ss<<Loo::Dump((*ii).first);
ss<<Loo::Dump((*ii).second);
ss<<CRLF;

}

return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


// MEMBERS

MapType m_map;
KeyVecVec m_keys;
ValueVecVec m_values;

}; // mjm_kv_vector

//////////////////////////////////////////////

template <class Tk, class Tv, class Tr>
class mjm_kv_vector_map : public std::map<typename Tr::StrTy, mjm_kv_vector<Tk,Tv, Tr > >  
{
 typedef mjm_kv_vector_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_kv_vector< Tk,Tv, Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_kv_vector_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{
}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_kv_vector_map




////////////////////////////////////////////
#ifdef  TEST_MJM_KV_VECTOR
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_kv_vector <std::string,std::string, Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;
void about()
{
Ss ss;
ss<<" MJM_KV_VECTOR "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_ERR(ss.str())

}

int main(int argc,char **args)
{
about();
typedef mjm_kv_vector<std::string,std::string,Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="quit") break;
if (cmd=="dump") { MM_ERR(x.dump()) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_KV_VECTOR_H__ 
