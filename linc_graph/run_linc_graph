#!/bin/bash

SELF="$0"
SRC=mjm_linc_graph.h
DEST=mjm_linc_graph.out
MAINDEF="TEST_LINC_GRAPH__"
#########################################################################
. cpp_proj_defines

LINK="$MMCD_LINK" #  
#LINK="$LINK -lz" 
#LINK="$LINK -L /home/ubuntu/dev/mailcore/mailcore2-master/libetpan/libetpan/src/.libs -letpan " 
#LINK="$LINK -L /home/ubuntu/dev/libetpan/libetpan/src/.libs -letpan " 

#LINK="$LINK -lxml2 -lsasl2 -ltidy -lctemplate -lpthread -luuid "  
# from beaver
#LINK="$LINK -licudata -licui18n -licuio -licu-le-hb  -liculx -licutest -licutu -licuuc "
#LINK="$LINK -licudata -licui18n -licuio  -liculx -licutest -licutu -licuuc "
#LINK="$LINK  -lssl -lcrypto -lglib-2.0" 
#LINK=" -lncurses -lreadline -Wl,-rpath,/home/marchywka/d/gcc/stage-4.9/usr/local/lib64/ "
LINK="$LINK -lncurses -lreadline "

COMPILER="$MMCD_COMPILER"
INCDIR="$MMCD_INCDIR " # " -I.. " 
#INCDIR="$INCDIR -I/home/ubuntu/dev/libetpan/libetpan/include " # " -I.. " 

# make stderr line buffered to ease reading mt code output, also in source  
MOREFLAGS=" -DxxLINE_LOCK_MM_ERR "

# just move it local for now 
#SRC=$MMCD_SRCDIR/$SRC
SRC=./$SRC

WARNS=$MMCD_WARNS

DEBUG="$MMCD_DEBUG" # " -gdwarf-3 -O0 "
FLAGS="$MMCD_DEBUG" # " -gdwarf-3 -O0 "


########################################################################

# INCDIR=" -I.. " 
#IJSON="../json/rapidjson-master/include/"
#BIGINTFLAGS="-DUSE_RATIONALS -I gmp/gmp-6.1.2 -Lgmp/gmp-6.1.2/.libs -lgmp "
#INCDIR=" -I..  -I$IJSON" 
#WARNS=" -Wall -Wno-unused-variable -Wno-unused-function -Wno-sign-compare -Wno-non-template-friend "
#WARNS=" -Wall "
# -E6510:~/d/jdft/jdftx/svn/cpp/mjm_libmesh$ ./mjm_zymo.out -source z3.txt -quit
#./mjm_zymo.out: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by ./mjm_zymo.out)

DEBUG=" -gdwarf-3 -O0 "

OPT=" -O3 "
#PROFILE=" -O3 -gdwarf-3 -pg "
FLAGS="$DEBUG"
RUN_DATA="zymo.txt"


compile()
{
mmcd_h_compile
}


xxxcompile()
{
echo moving  "$DEST"
#mv "$DEST" "old_$DEST"
#echo g++ -D$MAINDEF -std=gnu++11 $FLAGS $INCDIR  $WARNS -x c++ "$SRC" -o "$DEST"
#g++ -D$MAINDEF -std=gnu++11 $FLAGS $INCDIR  $WARNS $LINK -x c++ "$SRC" -o "$DEST"
#g++ -DTEST_SNACK__ -Wall  -std=gnu++11 -gdwarf-3 -I.. -Wno-unused-variable -Wno-unused-function -Wno-sign-compare -Wno-non-template-friend -x c++ "$SRC"
}
run()
{
#"./$DEST" -source "$RUN_DATA" -quit  | grep Peapod | mjm eq | mjm insertday > xxx
#"./$DEST" -source "$RUN_DATA" -quit  | grep "$1" | mjm eq | mjm insertday > xxx
"./$DEST" -source "$RUN_DATA" -quit   > xxx
#./a.out -source snacks.txt -quit  | grep Peapod | mjm eq | mjm insertday > xxx
}

string_query_16S()
{
cat << ------xxx------
#read-fasta ncbi /home/marchywka/d/latex/all16s.fasta
read-fasta ncbi ncbitax_16S.fasta 
read-queries q cs_queries 
#vector-search q zymo 
hit-or-miss q ncbi 
------xxx------
}
string_query_fasta_16S()
{
cat << ------xxx------
#read-fasta ncbi /home/marchywka/d/latex/all16s.fasta
read-fasta ncbi ncbitax_16S.fasta 
read-fasta q "$1" 
#read-queries q cs_queries 
#vector-search q zymo 
hit-or-miss-fasta q ncbi 
------xxx------
}



get_all_nr()
{
grep ">" /home/marchywka/d/latex/all16s.fasta  | awk '{print $1}'  | sed -e 's/>//' 
}


nr_to_tax()
{
i=0
while read
do
#echo $REPLY wtf 
fuk=`echo | eutilsnew -out xxx -db nucleotide -report full -retmode xml "$REPLY" `
x=`grep "<Object-id_id>"  xxx | sed -e 's/<[^>]*>//g'` 
echo $i $REPLY $x
i=$[ $i + 1 ]
done
}


fasta_taxons()
{
cat << ------xxx------
read-ragged rr taxon-lut.txt
read-fasta ff /home/marchywka/d/latex/all16s.fasta
modify-fasta-names ff rr
------xxx------
}
classify_strings()
{
cat << ------xxx------
load-tax tax-info
read-fasta ncbi ncbitax_16S.fasta
read-queries q cs_queries 
hit-or-miss q ncbi 
------xxx------
}
verify_taxons()
{
cat << ------xxx------
load-tax tax-info
read-fasta ncbi ncbitax_16S.fasta
check-fasta-taxon ncbi
------xxx------
}

example_discriminator()
{
cat << ------xxx------
4474  ./mjm_string_seq.out -source xxx -quit | tee level4_strings
 4475  cat  level4_strings  | mjm eq | mjm zed 2 | awk '{print $(NF-2)" "$0}' | sort -g -r > yyy3
 4476  for f in acidiferrobacterales acidimicrobiia ... xanthomonadales ; do x=`grep "$f"  yyy3  | head -n 1`; j=`echo $x | awk '{print $2}'`; he=$[ $j + 1] ; seq=`cat common_strings | head -n "$he" | tail -n 1| awk '{print $2}' `; echo $x" "$seq ; done |sort|uniq > most_l4_discriminators.txt
 4477  grep -i brucella ncbitax_16S.fasta 
 4478  more most_l4_discriminators.txt 
 4479  df
 4480  history >> hist_doing6
 4481  . srecord
 4482  history
marchywka@marchywka-Latitude-E6510:~/d/jdft/jdftx/svn/cpp/mjm_libmesh$ cat xxx
#read-fasta ncbi /home/marchywka/d/latex/all16s.fasta
read-fasta ncbi ncbitax_16S.fasta 
read-queries q cs_queries 
#vector-search q zymo 
#hit-or-miss q ncbi 
load-tax tax-info
err checking coverage of the tax tree with the fasta file 
coverage lut ncbi
err check queries now  
query-coverage q ncbi lut 1
#descend fusobacteria ncbi 
#coverage ncbi

------xxx------
}


pdf_maker_hist()
{
cat << ------xxx------
2032  run_clustalw_etc -opt -compile
 2033  run_clustalw_etc -runprn
 2034  run_clustalw_etc -prnpdf > xxx
 2035  cat xxx | R --no-save
 2036  pdflatex doh.tex 
 2037  evince doh.pdf 
 2038  tail -n 1 mod*
 2039  evince doh.pdf 
------xxx------
}

make_prn_mods()
{
# $libmesh/mjm_string_seq.out -cmd "random-scores 500 500 1 28 10000000"  -quit  > prn500_500.txt
#mjm_string_seq.h4171 random_scores  l1=500 l2=500 l3=1 flags=28 jmax=10000000 write_histo=1 write_align_marks=0 write_suspicious_marks=1 histo_abs_count=1 terminal_only=1
#marchywka@marchywka-Latitude-E6510:~/d/jdft/jdftx/svn/cpp/mjm_libmesh$ ./mjm_clustalw_etc.out -cmd "set-param omaxmax 8" -cmd "string-prob5 300 1200 8 4 0 18" -quit  | mjm eq > xxx

find -name "prn*_*.txt" | sed -e 's/[^0-9]/ /g' | while read
do
src=`echo $REPLY | awk '{print $1}'`
dest=`echo $REPLY | awk '{print $2}'`
omax=8
#pmax=15
#pmax=13
pmax=13
cmax=300
echo src $src dest $dest 
echo $DEST -cmd "set-param omaxmax $omax" -cmd "string-prob13 $dest $src 8 4 0 $pmax $cmax " -quit  
$DEST -cmd "set-param omaxmax $omax" -cmd "string-prob13 $dest $src 8 4 0 $pmax $cmax " -quit  | mjm eq > "mod${src}_${dest}.txt" 

done

}

two_files_R()
{
if [ "$3" != "" ]
then
echo "pdf(\"$3\")"
fi

cat << ------xxx------
xmax=100
df<-read.table("$1")
dfe<-read.table("$2")
par(mar=c(5, 4, 4, 6) + 0.1)
plot(df\$V3,log(df\$V5),xlim=c(0,xmax),ylim=c(-15,0),main="$2 red,  $1 black")
points(dfe\$V2,log(dfe\$V3/sum(dfe\$V3)),col="red",cex=2)
grid(col="blue")
# https://stackoverflow.com/questions/6142944/how-can-i-plot-with-2-different-y-axes
fck1=0*(0:100)
fck2=0*(0:100)
summ=sum(dfe\$V3)
for ( i in 1:100) { fck1[1+df\$V3[i]] = df\$V5[i]; } 
for ( i in 1:100) { fck2[1+dfe\$V2[i]] = dfe\$V3[i]/summ; } 
rag=1:(length(df\$V3))
no=dfe\$V3/sum(dfe\$V3)
z=2*(df\$V5[rag]-no[rag])/(df\$V5[rag]+no[rag])
z=fck1
for ( i in 1:100) { den=fck1[i]+fck2[i]; 
if (den!=0) { z[i]=2.0*(fck1[i]-fck2[i])/den; } 
if (den==0) { z[i]=0; }  } 
par(new = TRUE)
plot((0:100),  z, type = "l", axes = FALSE, bty = "n",ylim=c(-.1,.1), xlab = "", ylab = "")
#axis(side=4, at = pretty(range(z)))
mtext("Error",side=4,col="red",line=4) 
axis(4, ylim=c(-.1,.1), col="red",col.axis="red",las=1)


------xxx------

if [ "$3" != "" ]
then
echo "dev.off()"
fi

}

make_prn_pdfs()
{
find -name "prn*_*.txt" | sed -e 's/[^0-9]/ /g' | while read
do
src=`echo $REPLY | awk '{print $1}'`
dest=`echo $REPLY | awk '{print $2}'`
omax=10
pmax=18
echo #src $src dest $dest 
model="mod${src}_${dest}.txt" 
prn="prn${src}_${dest}.txt" 
dest="pdf${src}_${dest}.pdf" 
two_files_R "$model" "$prn" "$dest"

done

}

concat_names()
{
#3436  run_string_seq -classify > xxx
# 3470  ./mjm_string_seq.out -source xxx | grep counts | tee yyy
 #3479  cat yyy | awk '{i=1; flag=1; line="";  while ( i<=NF ) {if ((i<5)||(flag==0)) {line=line""$i" "; } else{ if ($i~/total=/){flag=0;line=line""$i" "  }else {line=line""$i"_"; }}  i=i+1; }print line}' | mjm eq > zzz
cat yyy | awk '{i=1; flag=1; line="";  while ( i<=NF ) {if ((i<5)||(flag==0)) {line=line""$i" "; } else{ if ($i~/total=/){flag=0;line=line""$i" "  }else {line=line""$i"_"; }}  i=i+1; }print line}' | mjm eq > zzz

}


# some plots
#./mjm_linc_graph.out -cmd "read-ragged in /home/scripts/script_data/cases/out/dog_daily.txt" -cmd "read-ragged p pin_andy.txt" -cmd "set-param datemin 2019-10-01" -cmd "set-param datexmax 2021-03-01" -cmd "set-param period 1" -cmd "set-param histogram_like 0x000" -cmd "add-ragged p nfoods *" -cmd "add-ragged p foods Iodine K1 K2 furosemide diroban tyrosine" -cmd "add-ragged p filter wide 1 uniform " -cmd "add-ragged p path-filter * wide" -cmd "add-ragged p path-filter .\*-furosemide unity" -cmd "add-ragged p path-filter .\*-diroban unity"  -cmd "snacks-txt-svg-i xxxandy1.svg 322 in p" -quit
make_diet_plot()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
#PIN="pin_andy.txt" 
PIN="pin_brownie.txt" 
DMIN="2020-06-01" 
DMAX="2021-11-11" 
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
FOODS="Iodine vitamina D-3 B-2 methionine tyrosine"
#DESTF="xxxandy1.svg"
DESTF="alldietplots.svg"
CODE=322 
PERIOD=1
FCK="*" 
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datexmax $DMAX\" -cmd \"set-param period $PERIOD\" -cmd \"set-param histogram_like 0x000\" -cmd \"add-ragged p nfoods *\" -cmd \"add-ragged p foods $FOODS \" -cmd \"add-ragged p filter wide 1 uniform \" -cmd \"add-ragged p path-filter "$FCK" wide\" -cmd \"add-ragged p path-filter .*-furosemide unity\" -cmd \"add-ragged p path-filter .*-diroban unity\"  -cmd \"snacks-txt-svg-i $DESTF $CODE in p\" -quit "
#CMD="$EXE -cmd \"read-ragged in $DATAFILE\" "  
SHT="$FCK"
#echo "$SHT"
echo "$CMD"
echo "$CMD" | bash -s


} # make_diet_plot
make_some_diet_plot()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
#PIN="pin_andy.txt" 
#PIN="pin_spicey.txt" 
PIN="$1" #"pin_brownie.txt" 
shift
#DMIN="2021-01-01" 
#DMAX="2021-11-11" 
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
FOODS=$*
DESTF="diettablex.svg"
# 322-256= 66 = 64+ 2 
CODE=322 
PERIOD=1
FCK="*" 
#CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datexmax $DMAX\" -cmd \"set-param period $PERIOD\" -cmd \"set-param histogram_like 0x000\" -cmd \"add-ragged p nfoods *\" -cmd \"add-ragged p foods $FOODS \" -cmd \"add-ragged p filter wide 1 uniform \" -cmd \"add-ragged p path-filter "$FCK" wide\" -cmd \"add-ragged p path-filter .*-furosemide unity\" -cmd \"add-ragged p path-filter .*-diroban unity\"  -cmd \"snacks-txt-svg-i $DESTF $CODE in p\" -quit "
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datexmax $DMAX\" -cmd \"set-param period $PERIOD\" -cmd \"set-param xhistogram_like 0x000\" -cmd \"add-ragged p nfoods *\" -cmd \"add-ragged p foods $FOODS \" -cmd \"snacks-txt-svg-i $DESTF $CODE in p\" -quit "
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param dateminxx $DMIN\" -cmd \"set-param datexmax $DMAX\" -cmd \"set-param xhistogram_like 0x000\" -cmd \"add-ragged p nfoods *\" -cmd \"add-ragged p foods $FOODS \" -cmd \"snacks-txt-svg-i $DESTF $CODE in p\" -quit "
#CMD="$EXE -cmd \"read-ragged in $DATAFILE\" "  
SHT="$FCK"
#echo "$SHT"
echo "$CMD"
echo "$CMD" | bash -s


} # make_diet_plot


# 2058  ./mjm_linc_graph.out -cmd "read-ragged in $SE_DATA_EXCHANGE/snacks_collated.ssv" -cmd "read-ragged p pin_ok.txt" -cmd "set-param dxatemin 2019-01-01" -cmd "set-param datexmax 2019-03-01" -cmd "set-param period 1" -cmd "set-param histogram_like 0x0200" -cmd "add-ragged p nfoods *" -cmd "add-ragged p foods K2 methionine threonine histidinehcl KCl" -cmd "add-ragged p filter wide 3 uniform " -cmd "add-ragged p path-filter * wide"   -cmd "snacks-txt-svg-i happyxxx.svg 0x0c2 in p" -quit  2>fck
# 2059  ls *.svg
# 2060  mkdir happy_each
# 2061  mv *.svg happy_each/
# 2062  cd happy_each/

make_all_diet_plots()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
#PIN="pin_andy.txt" 
#PIN="pin_spicey.txt" 
PIN="txt/pin_beauty.txt" 
#PIN="pin_brownie.txt" 
if [ "$1" != "" ]
then
PIN="$1"
echo setting pin $PIN
fi
DMIN="2021-06-01" 
DMIN="2021-01-01" 
DMIN="2021-08-18" 
DMAX="2021-11-11" 
DMAX="2022-05-01" 
CODE=0x01c2
OFILE="diettablex"
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
# TODO  the new files have units and need bit 8 set although crashing with
# logic error could beimproved... 
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"set-param period 1\" -cmd \"set-param histogram_like 0x0200\" -cmd \"add-ragged p nfoods *\" -cmd \"add-ragged p filter wide 3 uniform \" -cmd \"add-ragged p path-filter * wide\"   -cmd \"snacks-txt-svg-i spiceyxxx.svg $CODE in p\" -quit  2>fck"
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"set-param period 1\" -cmd \"set-param histogram_like 0x0200\" -cmd \"add-ragged p nfoods *\"  -cmd \"snacks-txt-svg-i $OFILE.svg $CODE in p\" -quit  2>fck"
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"set-param period 1\" -cmd \"add-ragged p nfoods *\"  -cmd \"snacks-txt-svg-i $OFILE.svg $CODE in p\" -quit  2>fck"
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"set-param period 1\" -cmd \"add-ragged p nfoods *\"  -cmd \"snacks-txt-svg-i $OFILE.svg $CODE in p\" -quit  2>fck"

echo "$CMD"
echo "$CMD" | bash -s

} # make_all_diet_plots
# this does not work right... 
make_some_diet_plots()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
#PIN="pin_andy.txt" 
PIN="txt/pin_spicey.txt" 
#PIN="pin_brownie.txt" 
DMIN="2021-06-01" 
DMAX="2021-11-11" 
CODE=0x01c2
OFILE="diettablex"
FOODS=$*
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
# TODO  the new files have units and need bit 8 set although crashing with
# logic error could beimproved... 
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"set-param period 1\" -cmd \"set-param histogram_like 0x0200\" -cmd \"add-ragged p nfoods *\" -cmd \"add-ragged p filter wide 3 uniform \" -cmd \"add-ragged p path-filter * wide\"   -cmd \"snacks-txt-svg-i spiceyxxx.svg $CODE in p\" -quit  2>fck"
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"set-param period 1\" -cmd \"set-param histogram_like 0x0200\" -cmd \"add-ragged p nfoods *\" -cmd \"add-ragged p foods $FOODS \"  -cmd \"snacks-txt-svg-i $OFILE.svg $CODE in p\" -quit  2>fck"

echo "$CMD"
echo "$CMD" | bash -s

} # make_some_diet_plots


# need to set bit zero in code for having units... 
# ./mjm_linc_graph.out -cmd "read-ragged in /home/scripts/script_data/cases/out/dog_daily.txt" -cmd "read-ragged p happya.txt" -cmd "add-ragged p dogs Happy" -cmd "add-ragged p datemin 2020-08-01" -cmd "add-ragged p datemax 2020-08-17" -cmd "snacks-rags newhtablexxx 0 in p" -quit

# over some specified period 
make_diet_table()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
#PIN="pin_andy.txt" 
PIN="spiceya.txt" 
DMIN="2021-06-01" 
DMAX="2021-11-11" 
CODE=0x01
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
# TODO  the new files have units and need bit 8 set although crashing with
# logic error could beimproved... 
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"snacks-rags uhtablexxx $CODE in p\" -quit  2>fck"

echo "$CMD"
echo "$CMD" | bash -s

} # make_diet_table
make_dt()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
#PIN="pin_andy.txt" 
PIN="$1" # spiceya.txt" 
OFILE="xxxtable"
#DMIN="2021-06-01" 
#DMAX="2021-11-11" 
CODE=0x01
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
# TODO  the new files have units and need bit 8 set although crashing with
# logic error could beimproved... 
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"snacks-rags $OFILE $CODE in p\" -quit  2>fck"

echo "$CMD"
echo "$CMD" | bash -s

} # make_dt




#grep snacks-time ../happyheart/happyheart.tex
#./mjm_linc_graph.out -cmd "read-ragged in $SE_DATA_EXCHANGE/snacks_collated.ssv" -cmd "read-ragged p happya.txt" -cmd "add-ragged p dogs Happy" -cmd "add-ragged p datemin 2011-12-01" -cmd "add-ragged p datemax 2029-01-01" -cmd "snacks-time htable 0 in p 4" -quit 
# 2207  ./mjm_linc_graph.out -cmd "read-ragged in $SE_DATA_EXCHANGE/snacks_collated.ssv" -cmd "read-ragged p happya.txt" -cmd "add-ragged p dogs Happy" -cmd "add-ragged p datemin 2011-12-01" -cmd "add-ragged p datemax 2029-01-01" -cmd "snacks-time htable 0 in p" -quit | grep April

make_diet_table_mo()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
#PIN="pin_andy.txt" 
PIN="spiceya.txt" 
DMIN="2021-01-01" 
DMAX="2021-11-11" 
CODE=0x01
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
# TODO  the new files have units and need bit 8 set although crashing with
# logic error could beimproved... 
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"set-param datemin $DMIN\" -cmd \"set-param datemax $DMAX\" -cmd \"snacks-time uhtablexxx $CODE in p 4\" -quit  2>fck"

echo "$CMD"
echo "$CMD" | bash -s

} # make_diet_table_mo


make_dt_mo()
{
EXE="./mjm_linc_graph.out"
DATAFILE="/home/scripts/script_data/cases/out/dog_daily.txt"
DATAFILE="/home/scripts/script_data/cases/out/dog_glob.txt"
#PIN="pin_andy.txt" 
PIN="$1" # spiceya.txt" 
OFILE="xxxtable"
CODE=0x03
# for using the glob parser
CODE=0x0b
#FOODS="Iodine K1 K2 furosemide diroban tyrosine"
# TODO  the new files have units and need bit 8 set although crashing with
# logic error could beimproved... 
CMD="$EXE -cmd \"read-ragged in $DATAFILE\" -cmd \"read-ragged p $PIN\" -cmd \"snacks-time $OFILE $CODE in p 4\" -quit  2>fck"

echo "$CMD"
echo "$CMD" | bash -s

} # make_dt_mo




help()
{
echo Usage $0 
cat "$0" | grep "=="  | grep -v grep | sed -e 's/.*==//' | sed -e 's/"[^"]*$//' 
}
while [ "$*" != "" ]
do
start="$*"
if [ "$1" == "-help" ]
then
help
shift
fi

if [ "$1" == "-compile" ]
then
compile
shift
fi

if [ "$1" == "-opt" ]
then
FLAGS="$OPT"
shift
fi
if [ "$1" == "-rat" ]
then
FLAGS="$BIGINTFLAGS $FLAGS"
shift
fi


if [ "$1" == "-verbose" ]
then
VERBOSE=1
shift
fi


if [ "$1" == "-diet-plot" ]
then
make_diet_plot
shift
fi

#make_all_diet_plots()

if [ "$1" == "-all-diet-plots" ]
then
make_all_diet_plots
shift
fi

if [ "$1" == "-adp" ]
then
make_all_diet_plots "$2"
shift
shift
fi


if [ "$1" == "-some-diet-plots" ]
then
shift
#make_some_diet_plots $*
make_some_diet_plot $*
while [ "$*" != "" ]
do
shift
done
fi



if [ "$1" == "-diet-table" ]
then
make_diet_table
shift
fi

if [ "$1" == "-dt" ]
then
make_dt "$2"
shift
shift
fi

if [ "$1" == "-dt-mo" ]
then
make_dt_mo "$2"
shift
shift
fi




if [ "$1" == "-diet-table-mo" ]
then
make_diet_table_mo
shift
fi



if [ "$1" == "-run" ]
then
run 
shift
fi

if [ "$1" == "-test" ]
then
# this does not return the right error code 
#run_clustalw_etc -opt -rat -compile
x="$?"
echo rc $x
if [ "$x" == 0 ]
then
if [ -e "$DEST" ]
then
#run_clustalw_etc -runprn
#run_clustalw_etc -prnpdf > xxx
#cat xxx | R --no-save
#pdflatex doh.tex 
#evince doh.pdf 
echo obsolete test 
else
echo executable missing
fi
fi
shift
fi


if [ "$1" == "-runprn" ]
then
make_prn_mods
shift
fi

if [ "$1" == "-prnpdf" ]
then
make_prn_pdfs
shift
fi

if [ "$1" == "-taxons" ]
then
get_all_nr |  nr_to_tax
shift
fi
if [ "$1" == "-fasta-taxon" ]
then
fasta_taxons
shift
fi

if [ "$1" == "-query" ]
then
string_query_16S
shift
fi
if [ "$1" == "-queryf" ]
then
string_query_fasta_16S "$2"
shift
shift
fi


if [ "$1" == "-classify" ]
then
classify_strings
shift
fi

if [ "$1" == "-verify-taxons" ]
then
verify_taxons
shift
fi


if [ "$1" == "-concat-names" ]
then
concat_names
shift
fi


if [ "$1" == "-test_biom" ]
then
loadexbiom
shift
fi

if [ "$1" == "-test_canon" ]
then
testcanonlut
shift
fi
if [ "$1" == "-blast-check" ] # check the non hits file for other hits 
then
blast_check_perfects
shift
fi

if [ "$1" == "-run-dog" ]
then
run "$2" 
shift
shift
fi


if [ "$1" == "-survey_pdf" ]
then
pdfsurvey | run_R
texgen -pdfs yyy*.pdf > xxx.tex
pdflatex xxx.tex
evince xxx.pdf
shift
fi
if [ "$1" == "-survey_pdf_long" ]
then
pdfsurveylong | run_R
texgen -pdfs yyy*.pdf > xxx.tex
pdflatex xxx.tex
evince xxx.pdf
shift
fi






if [ "$1" == "-all" ]
then
$SELF -compile
$SELF -run
$SELF -survey_pdf

shift
fi


if [ "$*" == "$start" ]
then
help
exit -1
fi
done
